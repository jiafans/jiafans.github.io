<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Introduction to System Software</title>
    <link href="/2021/04/02/Introduction-to-System-Software/"/>
    <url>/2021/04/02/Introduction-to-System-Software/</url>
    
    <content type="html"><![CDATA[<h1 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h1><h2 id="System-Software-is-computer-software-designed-to"><a href="#System-Software-is-computer-software-designed-to" class="headerlink" title="System Software is computer software designed to"></a>System Software is computer software designed to</h2><ul><li>Operate and control the computer hardware</li><li>Provide a platform for running application software</li></ul><h2 id="System-software-includes-the-following"><a href="#System-software-includes-the-following" class="headerlink" title="System software includes the following:"></a>System software includes the following:</h2><ul><li>Operating system, allows the parts of a computer to work together and also provides a platform to run high-level system software and application software</li><li>Utility software, helps to analyze, configure, optimize and maintain the computer</li><li>Device drivers, like BIOS and device firmware provide basic functionality to operate and control the hardware</li><li>A user interface</li><li>Sometimes developer tools</li></ul><h2 id="What-is-an-Operating-System"><a href="#What-is-an-Operating-System" class="headerlink" title="What is an Operating System?"></a>What is an Operating System?</h2><ul><li>An intermediary between a user of a computer and the computer hardware</li><li>Goals to execute user programs and make solving user problems easier</li><li>Goals to make the computer system convenient to use</li><li>Goals to use the computer hardware in an efficient manner</li></ul><h2 id="Operating-System-Definition"><a href="#Operating-System-Definition" class="headerlink" title="Operating System Definition"></a>Operating System Definition</h2><ul><li>OS is a resource allocator<ul><li>Manages all resources</li><li>Decides between conflicting requests for efficient and fair resources use</li></ul></li><li>OS is a control program<ul><li>Controls execution of programs to prevent errors and improper use of the computer</li></ul></li><li>Kernel-The program running at all times on the computer</li></ul><h2 id="Computer-Startup"><a href="#Computer-Startup" class="headerlink" title="Computer Startup"></a>Computer Startup</h2><ul><li>Bootstrap program is loaded at power-up or reboot<ul><li>Typically stored in ROM or EPROM, generally known as firmware</li><li>Initializes all aspects of system</li><li>Loads operating system kernel and starts excution</li></ul></li></ul><h1 id="Lecture2"><a href="#Lecture2" class="headerlink" title="Lecture2"></a>Lecture2</h1><h2 id="Computer-System-amp-OS-Structures"><a href="#Computer-System-amp-OS-Structures" class="headerlink" title="Computer System &amp; OS Structures"></a>Computer System &amp; OS Structures</h2><ul><li><p>Computer System Operation</p><ul><li>I/O Structure</li><li>Storage Structure, Storage Hierarchy</li><li>Hardware Protection</li></ul></li><li><p>Operating System Services, System calls, System Programs</p></li><li><p>Structuring OS</p><ul><li>Virtual Machine Struction and Organization</li></ul></li><li><p>OS Design and Implementation</p><ul><li>Process Management, Memory Management, Secondary Storage Management, I/O System Management, File Management, Protection System, Networking, Command-Interpreter.</li></ul></li></ul><h2 id="Computer-System-Organization"><a href="#Computer-System-Organization" class="headerlink" title="Computer System Organization"></a>Computer System Organization</h2><ul><li>Computer-system operation<ul><li>One or more CPUs, device controllers connect through common bus providing access to shared memory</li><li>Concurrent execution of CPUs and devices competing for memory cycles</li></ul></li></ul><p><img src="https://i.loli.net/2021/04/02/EmP1UZpBjagG2cw.png" alt="CleanShot 2021-04-02 at 16.04.26@2x"></p><h2 id="Computer-System-Operation"><a href="#Computer-System-Operation" class="headerlink" title="Computer-System Operation"></a>Computer-System Operation</h2><ul><li>I/O devices and athe CPU can execute concurrently</li><li>Each device controller is in charge of a particular device type</li><li>Each device controller has a local buffer</li><li>CPU moves data from/to main memory to/from local buffers</li><li>I/O is from the devices to local buffer of controller</li><li>Devices controller informs CPU that it has finished its operation by raising an interrupt</li></ul><h2 id="Common-Functions-of-Interrupts"><a href="#Common-Functions-of-Interrupts" class="headerlink" title="Common Functions of Interrupts"></a>Common Functions of Interrupts</h2><ul><li>Interrupt transfers control to the interrupt service routine, generally through the <em>interrupt vector</em>, which contains the addresses of all the services routines (jump)</li><li>Interrupt architecture must save the <em>address</em> of the interruptted instruction</li><li>Incoming interrupts are disabled while another interrupt is being processed to prevent a <em>lost</em> interrupt</li><li><em>An operating system is interrupt driven</em></li></ul><p>A polled interrupt requires that the interrupt handler poll or send a signal to each device in turn in handler poll or send a signal to each device in turn in order to find to which one sent the interrupt request </p><h2 id="I-O-Structure"><a href="#I-O-Structure" class="headerlink" title="I/O Structure"></a>I/O Structure</h2><ul><li><p>Synchronous I/O (blocking I/O):</p><p>  After I/O starts, control return to user program only upon I/O completion</p><ul><li>wait instruction idles CPU until next interrupt</li><li>no simultaneous I/O processing, at most one outstanding I/O request at a time</li></ul></li><li><p>Asynchronous I/O (non-blocking I/O):</p><p>  after I.O starts, control returs to user program without waiting for I/O completion</p><ul><li>System call</li><li>Device Status table - holds type, address and state for each device</li><li>OS indexes into I/O device table to determine device status and modify table entry include interrupt</li></ul></li></ul><h2 id="Direct-Memory-Access-Structure"><a href="#Direct-Memory-Access-Structure" class="headerlink" title="Direct Memory Access Structure"></a>Direct Memory Access Structure</h2><p><img src="https://i.loli.net/2021/04/03/1wz74WTE5RqroaA.png" alt="CleanShot 2021-04-03 at 13.15.55@2x"></p><ul><li>DMA: Direct Memory Access</li></ul><h2 id="How-a-Modern-Computer-Works"><a href="#How-a-Modern-Computer-Works" class="headerlink" title="How a Modern Computer Works?"></a>How a Modern Computer Works?</h2><p><img src="https://i.loli.net/2021/04/03/yYwJQSmxKWrZbf7.png" alt="CleanShot 2021-04-03 at 13.17.29@2x"></p><h2 id="Storage-Hierarchy"><a href="#Storage-Hierarchy" class="headerlink" title="Storage Hierarchy"></a>Storage Hierarchy</h2><ul><li>Storage systems organized in herarchy based on <ul><li>Speed</li><li>Cost</li><li>Volatility</li></ul></li><li><strong>Caching</strong> is often used between storage systems<ul><li>transparently copying information into faster storage system (e.g. CPU cache holds most-recently used data from main memory)</li><li>main memory can be viewed as a <em>cache</em> for secondary storage</li></ul></li></ul><p><img src="https://i.loli.net/2021/04/03/6zFQRWr3fgqUaLZ.png" alt="CleanShot 2021-04-03 at 13.29.27@2x"></p><h2 id="CPU-Protection"><a href="#CPU-Protection" class="headerlink" title="CPU Protection"></a>CPU Protection</h2><ul><li>Timer - interrupts computer after specified period to ensure that OS maintain control<ul><li>Timer is decremented every clock tick</li><li>When timer reaches a value of 0, an interrupt occurs</li></ul></li><li>Timer is commonly used to implement time sharing</li><li>Timer is also used to compute the current time</li><li>Load timer is a privileged instruction</li></ul><hr><p><a href="docs.shaojia.fan/eecs111">更多内容</a>可访问docs.shaojia.fan/eecs111</p>]]></content>
    
    
    <categories>
      
      <category>课堂笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
      <tag>EECS 111</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在树莓派上配置Plex服务器</title>
    <link href="/2021/03/09/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E9%85%8D%E7%BD%AEPlex%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/03/09/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E9%85%8D%E7%BD%AEPlex%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="在树莓派上配置Plex-Media-Server"><a href="#在树莓派上配置Plex-Media-Server" class="headerlink" title="在树莓派上配置Plex Media Server"></a>在树莓派上配置Plex Media Server</h1><h2 id="启动之前"><a href="#启动之前" class="headerlink" title="启动之前"></a>启动之前</h2><p>先创建一个用于储存Plex媒体文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mkdir -p /opt/plexmedia/&#123;movies,series&#125;<br></code></pre></td></tr></table></figure><p>再设置Plex Media Server作为用户plex运行，并添加对媒体文件和目录的读写的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo chown -R plex: /opt/plexmedia<br></code></pre></td></tr></table></figure><blockquote><p>此处可以选择别的位置来储存</p></blockquote><p>我们现在把移动硬盘插上树莓派，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">fdisk -l<br>df -h<br></code></pre></td></tr></table></figure><p>找到接入的硬盘的位置，像我的就是在/dev/sda2/的位置</p><p>接下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /home/pi/Seagate <span class="hljs-comment">##创建想要挂载到的文件夹路径</span><br>mount /dev/sda2 /home/pi/Seagate<br></code></pre></td></tr></table></figure><p>此时可能会出现挂载错误的提示，很有可能是因为移动硬盘的格式是NTFS或是exFAT格式的，树莓派不能原生支持这种格式，先别急，在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install exfat-fuse<br>modprobe fuse<br></code></pre></td></tr></table></figure><p>不出意外此时就可以用mount指令挂载移动硬盘了</p><blockquote><p> 如果还有问题可以通过reboot指令重启树莓派就行了</p></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>接下来打开浏览器输入 YOUR_SERVER_IP:32400/web 打开配置的GUI界面</p><p><img src="https://raspberrypi.club/wp-content/uploads/2020/01/plex-media-server-sign-in.jpg" alt="如何在 Raspberry Pi 上安装 Plex Media Server-树莓派俱乐部"></p><p>为了使用Plex，我们需要先创建一个账户登录或者用Google和Facebook的API登录，之后在iOS，安卓或是网页端都是使用此账号连接我们的树莓派服务器。</p><p>注册并登录后会被导航到这个网页</p><p><img src="https://raspberrypi.club/wp-content/uploads/2020/01/how-plex-works-1024x529.jpg" alt="如何在 Raspberry Pi 上安装 Plex Media Server-树莓派俱乐部"></p><p>点击 “GOT IT!” 并在下一个页面上输入想要的Plex服务器的名称并点击 “NEXT”<img src="https://raspberrypi.club/wp-content/uploads/2020/01/plex-server-setup-hostname-1024x593.jpg" alt="如何在 Raspberry Pi 上安装 Plex Media Server-树莓派俱乐部"></p><blockquote><p>如果没有购买Plex Pass不要勾选 “Allow me to access my media outside my home”</p></blockquote><h2 id="配置Plex媒体库"><a href="#配置Plex媒体库" class="headerlink" title="配置Plex媒体库"></a>配置Plex媒体库</h2><p>下一步是添加媒体库，点击 “Add Library” 添加库，根据自身需求添加媒体库文件种类，我们这里使用Movies</p><p><img src="https://raspberrypi.club/wp-content/uploads/2020/01/plex-media-server-add-library.jpg" alt="如何在 Raspberry Pi 上安装 Plex Media Server-树莓派俱乐部"></p><p>在下一步中，单机 “Browse for media folder”, 将之前挂载的移动硬盘的路径添加进去，点击 “Add”, 再 “Add library”</p><p><img src="https://raspberrypi.club/wp-content/uploads/2020/01/plex-media-library.jpg" alt="如何在 Raspberry Pi 上安装 Plex Media Server-树莓派俱乐部"></p><p>之后点击 “Next”, 就算配置完成了，此时Plex会扫描媒体库内的所有视频文件，并用自带的刮削器在线获取电影封面等其他信息</p><p>之后也可以按照自身需求添加不同的媒体库</p><blockquote><p>树莓派的视频转码能力很差，如果码率太高需要等待一定时间转码</p><p>本文的教程信息基于树莓派俱乐部的<a href="https://raspberrypi.club/298.html">教程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>最近捣鼓的</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在树莓派上安装Plex服务器</title>
    <link href="/2021/03/09/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E5%AE%89%E8%A3%85Plex%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/03/09/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E5%AE%89%E8%A3%85Plex%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="在树莓派上创建Plex服务器"><a href="#在树莓派上创建Plex服务器" class="headerlink" title="在树莓派上创建Plex服务器"></a>在树莓派上创建Plex服务器</h1><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>先在树莓派上安装好Raspbian，最新的版本是基于Debian Buster。添加ssh文件进tf卡根目录开启SSH功能。接上网线，用Fing查找局域网内的树莓派IPv4的地址。</p><hr><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>先用SSH工具连接上树莓派的IP，默认的用户名为pi，密码为raspberry。<br>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo passwd root<br></code></pre></td></tr></table></figure><p>命令更改root密码，之后使用su输入设置好的密码登入root，这样就可以省去每次在命令前增加sudo的繁琐操作了。<br>因为在国内下载国外软件连接会很慢，所以先更改一下repository源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>删除所有内容用以下替代</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/raspbian/</span>raspbian/ buster main non-free contrib rpi<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/raspbian/</span>raspbian/ buster main non-free contrib rpi<br></code></pre></td></tr></table></figure><p>同样的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/apt/sources.list.d/raspi.list<br></code></pre></td></tr></table></figure><p>删除所有内容用以下替代</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/raspberrypi/</span> buster main ui<br></code></pre></td></tr></table></figure><p>在vi编辑器里输入或删除内容前要先按“i”进入INSERT模式，替换完成后按esc，输入:wq退出。<br>接下来更新apt源并更新软件</p><blockquote><p>此处的-y是跳过输入Y确认的一步</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br>apt-get upgrade -y<br></code></pre></td></tr></table></figure><p>接下来安装需要的依赖软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install apt-transport-https ca-certificates curl<br></code></pre></td></tr></table></figure><p>运行以下命令导入存储库的GPG密钥，将APT存储库添加到系统的软件存储库列表中并再次更新源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -<br><span class="hljs-built_in">echo</span> deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list<br>apt-get update<br></code></pre></td></tr></table></figure><p>最后开始安装Plex服务端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install plexmediaserver<br></code></pre></td></tr></table></figure><p>这一部分会比较耗时，中间需要输入Y继续</p><hr><p>##检验安装</p><p>不出意外就正式安装好了！<br>我们可以看看Plex服务是不是已经在运行了，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl status plexmediaserver<br></code></pre></td></tr></table></figure><p>如果输出是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">● plexmediaserver.service - Plex Media Server<br>   Loaded: loaded (/lib/systemd/system/plexmediaserver.service; enabled; vendor preset: enabled)<br>  Active: active (running) since Sun 2019-05-26 08:11:09 EDT; 27min ago<br>  Process: 11470 ExecStartPre=/bin/sh -c /usr/bin/<span class="hljs-built_in">test</span> -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&#125;</span>&quot;</span> || /bin/mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR&#125;</span>&quot;</span> (code=exited, status=0/SUCCESS)<br>Main PID: 11474 (sh)<br>  CGroup: /system.slice/plexmediaserver.service<br></code></pre></td></tr></table></figure><p>这样的，就说明正常运行了<br>按ctrl+c退出，接下来进入配置过程！</p>]]></content>
    
    
    <categories>
      
      <category>最近捣鼓的</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树莓派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装Homebrew出现Connection refused</title>
    <link href="/2021/03/08/%E5%AE%89%E8%A3%85Homebrew%E5%87%BA%E7%8E%B0Connection-refused/"/>
    <url>/2021/03/08/%E5%AE%89%E8%A3%85Homebrew%E5%87%BA%E7%8E%B0Connection-refused/</url>
    
    <content type="html"><![CDATA[<h1 id="安装Homebrew出现Connection-refused"><a href="#安装Homebrew出现Connection-refused" class="headerlink" title="安装Homebrew出现Connection refused"></a>安装Homebrew出现Connection refused</h1><p>最近想通过Homebrew在Mac上实现像Linux系统那样仅用yum或apt等命令行一键安装和更新软件。根据官网的安装说明，安装Homebrew的方法十分简单，仅需要打开Mac上的终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>这一行命令就可以实现一键安装。</p><p>但是不知因为什么原因，输入这段命令总是会提示</p><p><img src="2021-03-08_7.19.47.png"></p><p>似乎是因为网站的端口对我关闭了，使得curl命令无法连接到此网址。</p><p>一般在Linux系统内遇到这种方法我可以通过查询此网站open的IP并对本地的IP协议进行修改，但是这次我尝试了一个新的方法。我直接用本地的浏览器打开了<br><a href="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh">https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</a><br>此网址，出现一长串的脚本。将所有文本保存下来并用编辑器保存成install.sh文件。</p><p>再使用终端输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash <span class="hljs-comment">##储存在电脑上的路径/install.sh</span><br></code></pre></td></tr></table></figure><p>按照终端上的指示，成功安装。</p><blockquote><p>进入<a href="https://site.ip138.com/raw.Githubusercontent.com/">https://site.ip138.com/raw.Githubusercontent.com/</a>可查询相关网站的IP地址</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>最近捣鼓的</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
